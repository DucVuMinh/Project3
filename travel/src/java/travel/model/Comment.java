package travel.model;
// Generated 16-Nov-2016 14:58:44 by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.FetchMode;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;
/**
 * Comment generated by hbm2java
 */
public class Comment implements java.io.Serializable, InterfaceEntity {

    private Integer idComment;
    private Posts posts;
    private User user;
    private Date dateWrite;
    private int state;
    private String context;

    public Comment() {
    }

    public Comment(Posts posts, User user, Date dateWrite, int state, String context) {
        this.posts = posts;
        this.user = user;
        this.dateWrite = dateWrite;
        this.state = state;
        this.context = context;
    }

    public Integer getIdComment() {
        return this.idComment;
    }

    public void setIdComment(Integer idComment) {
        this.idComment = idComment;
    }

    public Posts getPosts() {
        return this.posts;
    }

    public void setPosts(Posts posts) {
        this.posts = posts;
    }

    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Date getDateWrite() {
        return this.dateWrite;
    }

    public void setDateWrite(Date dateWrite) {
        this.dateWrite = dateWrite;
    }

    public int getState() {
        return this.state;
    }

    public void setState(int state) {
        this.state = state;
    }

    public String getContext() {
        return this.context;
    }

    public void setContext(String context) {
        this.context = context;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Comment other = (Comment) obj;
        int id1 = this.idComment;
        int id2 = other.idComment;
        return (id1 == id2);
    }

    @Override
    public int add() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        if (this.posts != null) {
            try {
                this.dateWrite = new Date();
                this.state = 1;
                tx = session.beginTransaction();
                this.idComment = (Integer) session.save(this);
                tx.commit();
            } catch (HibernateException e) {
                if (tx != null) {
                    tx.rollback();
                }
                e.printStackTrace();
            }
        }
        session.close();
        return this.idComment;
    }

    @Override
    public void update() {
        if (this.idComment != null) {

            Session session;
            session= HibernateUtil.getSessionFactory().openSession();
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                session.update(this);
                tx.commit();
            } catch (HibernateException e) {
                if (tx != null) {
                    tx.rollback();
                }
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }

    @Override
    public void delete() {
        this.state = -1;
        this.update();
    }

    public static Comment getCommentById(int id) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Criteria cr = session.createCriteria(Comment.class).setFetchMode("user", FetchMode.EAGER).setFetchMode("posts", FetchMode.EAGER);
        cr.add(Restrictions.eq("idComment", id));
        List listComment = cr.list();
        if (listComment != null && !listComment.isEmpty()) {
            Comment temp = (Comment) listComment.get(0);
            session.close();
            return temp;
        } else {
            session.close();
            return null;
        }
    }

    @Override
    public String getJson() {
        String json = "";

        json += "{"
                + "\"id\":\"" + getIdComment() + "\","
                + "\"username\":\"" + getUser().getUsername() + "\","
                + "\"profile\":\"" + getUser().getProfile() + "\","
                + "\"dateWrite\":\"" + getDateWrite() + "\","
                + "\"state\":" + getState() + ","
                + "\"context\":\"" + getContext() + "\""
                + "}";

        return json;
    }

}
