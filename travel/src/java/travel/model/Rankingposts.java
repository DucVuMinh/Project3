package travel.model;
// Generated 16-Nov-2016 14:58:44 by Hibernate Tools 4.3.1

import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

/**
 * Rankingposts generated by hbm2java
 */
public class Rankingposts implements java.io.Serializable, InterfaceEntity {

    private RankingpostsId id;
    private Posts posts;
    private User user;
    private int rank;

    public Rankingposts() {
    }

    public Rankingposts(RankingpostsId id, Posts posts, User user, int rank) {
        this.id = id;
        this.posts = posts;
        this.user = user;
        this.rank = rank;
    }

    public RankingpostsId getId() {
        return this.id;
    }

    public void setId(RankingpostsId id) {
        this.id = id;
    }

    public Posts getPosts() {
        return this.posts;
    }

    public void setPosts(Posts posts) {
        this.posts = posts;
    }

    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public int getRank() {
        return this.rank;
    }

    public void setRank(int rank) {
        this.rank = rank;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Rankingposts other = (Rankingposts) obj;

        return (this.id.getIdPosts() == other.id.getIdPosts() && this.id.getIdUser() == other.id.getIdUser());
    }

    @Override
    public int add() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        Integer id = -2;
        if (this.id != null) {
            Rankingposts rp = getRankingPostById(this.id);
            if (rp == null) {
                try {
                    tx = session.beginTransaction();
                    session.save(this);
                    tx.commit();
                } catch (HibernateException e) {
                    if (tx != null) {
                        tx.rollback();
                    }
                    e.printStackTrace();
                }
            } else {
                tx = session.beginTransaction();
                session.update(this);
                tx.commit();
            }
        }
        session.close();
        return id;
    }

    @Override
    public void update() {
        if (this.id != null) {

            Session session = HibernateUtil.getSessionFactory().openSession();
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                session.update(this);
                tx.commit();
            } catch (HibernateException e) {
                if (tx != null) {
                    tx.rollback();
                }
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }

    @Override
    public void delete() {
        if (this.id != null) {

            Session session = HibernateUtil.getSessionFactory().openSession();
            Transaction tx = null;
            try {
                tx = session.beginTransaction();
                session.delete(this);
                tx.commit();
            } catch (HibernateException e) {
                if (tx != null) {
                    tx.rollback();
                }
                e.printStackTrace();
            } finally {
                session.close();
            }
        }
    }

    public static Rankingposts getRankingPostById(RankingpostsId id) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Criteria cr = session.createCriteria(Rankingposts.class);
        List listRankLand = null;
        try {
            cr.add(Restrictions.eq("id", id));
            listRankLand = cr.list();
        } catch (HibernateException e) {
            e.printStackTrace();
        }
        if (listRankLand != null && !listRankLand.isEmpty()) {
            Rankingposts temp = (Rankingposts) listRankLand.get(0);
            session.close();
            return temp;
        } else {
            session.close();
            return null;
        }
    }

    @Override
    public String getJson() {
        String json = "";

        json += "{"
                + "\"idUser\":" + getUser().getIdUser() + ","
                + "\"idPosts\":" + getPosts().getIdPosts() + ","
                + "\"rank\":" + getRank()
                + "}";

        return json;
    }
//    public static void main(String args[]){
//        Rankingposts r=Rankingposts.getRankingPostById(new RankingpostsId(1, 1));
//        System.out.println(r.getRank());
//    }
}
